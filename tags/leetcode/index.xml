<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on AIMHector&#39;s blog</title>
    <link>https://aimhector.github.io/tags/leetcode/</link>
    <description>Recent content in Leetcode on AIMHector&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 May 2020 22:55:46 +0800</lastBuildDate>
    
        <atom:link href="https://aimhector.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>组合总和</title>
      <link>https://aimhector.github.io/2020/08/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Tue, 18 Aug 2020 11:37:15 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/08/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>组合总和1： 给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的数字可以无限制重复被选取 说明: 所有数字（包括</description>
    </item>
    
    <item>
      <title>前K个高频元素</title>
      <link>https://aimhector.github.io/2020/05/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 27 May 2020 22:55:46 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</guid>
      <description>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。 示例 1: 输入: nums = [1,1,1,2,2,3], k = 2 输出: [1,2] 示例 2: 输入: nums = [1], k = 1 输出: [1] 提示： 你可以假设给定的</description>
    </item>
    
    <item>
      <title>判断图结构是否有环</title>
      <link>https://aimhector.github.io/2020/05/%E5%88%A4%E6%96%AD%E5%9B%BE%E7%BB%93%E6%9E%84%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</link>
      <pubDate>Sat, 23 May 2020 23:43:48 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E5%88%A4%E6%96%AD%E5%9B%BE%E7%BB%93%E6%9E%84%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</guid>
      <description>定义一个简单的图结构，完成对一个有向图的遍历： a) 当无环的时候，输出拓扑遍历的顺序， b) 当有环时，输出空（无法遍历） eg a-b-c-d, a b c d a-b-c-a, 空 a-b a-c b-d c-d, a b</description>
    </item>
    
    <item>
      <title>项目梳理</title>
      <link>https://aimhector.github.io/2020/05/%E9%A1%B9%E7%9B%AE%E6%A2%B3%E7%90%86/</link>
      <pubDate>Tue, 19 May 2020 13:59:15 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E9%A1%B9%E7%9B%AE%E6%A2%B3%E7%90%86/</guid>
      <description>项目梳理 1.使用epoll边缘触发的I/O多路复用技术，非阻塞IO Q1：为什么使用epoll？ epoll维护了一个红黑树，使用epoll可以</description>
    </item>
    
    <item>
      <title>快排</title>
      <link>https://aimhector.github.io/2020/05/%E5%BF%AB%E6%8E%92/</link>
      <pubDate>Mon, 18 May 2020 23:51:45 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E5%BF%AB%E6%8E%92/</guid>
      <description>//快排单向扫描 void quickSort3(vector&amp;lt;int&amp;gt;&amp;amp; nums,int l , int r){ if(l &amp;lt; r){ int p = parition1(nums,l,r); quickSort3(nums,l,p-1); quickSort3(nums,p+1,r); } } int parition1(vector&amp;lt;int&amp;gt;&amp;amp; nums , int l , int r){ int p = nums[l]; int j = l+1; for(int i = l ; i &amp;lt; r ; ++i){ if(nums[i] &amp;lt; p){ swap(nums[i],nums[j++]); } } swap(nums[j],nums[r]); return j; } //快速排序 双</description>
    </item>
    
    <item>
      <title>二叉树层的层次遍历</title>
      <link>https://aimhector.github.io/2020/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 18 May 2020 22:44:50 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</guid>
      <description>102. 二叉树的层序遍历 给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。 示例： 二叉树：[3,9,20,nul</description>
    </item>
    
    <item>
      <title>概率问题（待更新）</title>
      <link>https://aimhector.github.io/2020/05/%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 18 May 2020 18:23:38 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/</guid>
      <description>1.一个硬币，正面概率0.7，反面概率0.3，现在有一瓶水，怎么掷能让两个人公平的喝到水 抛两次硬币，先正后反A喝到水，先反后正B喝到水。如果</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://aimhector.github.io/2020/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 16 May 2020 21:57:58 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式保证一个类只有一个实例，并提供了该实例的全局访问。 实现一：饿汉式 class Singleton{ public: static Singleton* getInstance(){ //首先检查对象是否存在 if(m_instance == nullptr){ m_instance = new Singleton(); } return m_instance; } private: Singleton(){}; ~Singleton(){}; static Singleton*</description>
    </item>
    
    <item>
      <title>二叉树路径</title>
      <link>https://aimhector.github.io/2020/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Sat, 16 May 2020 21:28:09 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%B7%AF%E5%BE%84/</guid>
      <description>leetcode.113 路径总和2 给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。 说明: 叶子节点是指没有子节点的节点。 示例: 给</description>
    </item>
    
    <item>
      <title>买卖股票问题</title>
      <link>https://aimhector.github.io/2020/05/%E4%B9%B0%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 14 May 2020 22:04:13 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E4%B9%B0%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</guid>
      <description>买卖股票问题有多种变体，在一些变体中需要考虑动态规划的思路才能够更好的解决。题目大意是给定一个数组，第i 个元素即股票在第i 天的价格，求解通过</description>
    </item>
    
    <item>
      <title>高性能web服务器（二）：多线程设计</title>
      <link>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03/</link>
      <pubDate>Sun, 10 May 2020 10:51:27 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03/</guid>
      <description>关于多线程有两个重要问题: 第一是主线程如何等地啊多个子线程完成初始化。 第二是如何通知处于事件分发中的子线程有新的事件加入、删除、修改。</description>
    </item>
    
    <item>
      <title>高性能web服务器（一）：设计思路</title>
      <link>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/</link>
      <pubDate>Fri, 08 May 2020 11:43:08 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/</guid>
      <description>在编写高性能web服务器之前，首先需要构建一个支持TCP的高性能网络编程框架，有了框架之后，再添加HTTP特性的支持就会容易很多。 设计需求 需</description>
    </item>
    
    <item>
      <title>C&#43;&#43;生命周期与编程范式</title>
      <link>https://aimhector.github.io/2020/05/c-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Thu, 07 May 2020 16:57:09 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/c-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>C++的编译链接 预处理 编译 汇编 链接 C++的编程范式 面向过程指的是顺序执行语句、子程序，把任务分解成若干个步骤去执行，最终达成目标。 面向对象的</description>
    </item>
    
    <item>
      <title>861. 翻转矩阵后的得分</title>
      <link>https://aimhector.github.io/2020/05/%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/</link>
      <pubDate>Wed, 06 May 2020 23:29:40 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/</guid>
      <description>题目描述： 有一个二维矩阵 A 其中每个元素的值为 0 或 1 。 移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为</description>
    </item>
    
    <item>
      <title>839. 相似字符串组</title>
      <link>https://aimhector.github.io/2020/05/839/</link>
      <pubDate>Wed, 06 May 2020 23:29:31 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/839/</guid>
      <description>题目描述： 如果我们交换字符串 X 中的两个不同位置的字母，使得它和字符串 Y 相等，那么称 X 和 Y 两个字符串相似。如果这两个字符串本身是相等的，那它们</description>
    </item>
    
    <item>
      <title>网络IO模型</title>
      <link>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B_01/</link>
      <pubDate>Wed, 06 May 2020 21:07:03 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B_01/</guid>
      <description>阻塞 / 非阻塞 VS 同步 / 异步 第一种是阻塞 I/O。阻塞 I/O 发起的 read 请求，线程会被挂起，一直等到内核数据准备好，并把数据从内核区域拷贝到应用程序的缓冲</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础问题总结</title>
      <link>https://aimhector.github.io/2020/04/c-/</link>
      <pubDate>Sat, 25 Apr 2020 00:36:11 +0800</pubDate>
      
      <guid>https://aimhector.github.io/2020/04/c-/</guid>
      <description>1.new 与 malloc new 是C++的操作符，malloc是C的标准库函数 new会调用构造函数，而malloc()不会 new返回指定类型的指针，而malloc(</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://aimhector.github.io/2019/03/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aimhector.github.io/2019/03/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://aimhector.github.io/2019/03/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aimhector.github.io/2019/03/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://aimhector.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aimhector.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
  </channel>
</rss>
