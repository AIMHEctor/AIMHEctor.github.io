{"categories":[{"title":"syntax","uri":"https://AIMHEctor.github.io/categories/syntax/"},{"title":"themes","uri":"https://AIMHEctor.github.io/categories/themes/"},{"title":"网络编程","uri":"https://AIMHEctor.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}],"posts":[{"content":"","id":0,"section":"posts","summary":"","tags":["网络编程"],"title":"网络IO模型","uri":"https://AIMHEctor.github.io/2020/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B_01/","year":"2020"},{"content":"1.new 与 malloc\n new 是C++的操作符，malloc是C的标准库函数 new会调用构造函数，而malloc()不会 new返回指定类型的指针，而malloc()返回void* new会自动计算需要分配的空间，而malloc()需要手工计算字节数。 new可以被重载，而malloc()不能。  使用new时实际执行的三步操作：\n 调用::operator new 配置内存 调用Foo()构造函数构造对象并传入初始值 返回一个指向该对象的指针  2.内存溢出和内存泄漏 内存溢出，指的是系统不能再分配出你所需要的空间。\n内存泄漏，指的是没有释放掉已经不再使用的内存\n内存泄漏的类型\n 堆内存泄漏  程序运行中根据需要从堆内存中分配一块内存，并且没有释放掉。   系统资源泄漏  常见的内存溢出\n 内存分配未成功，却使用了它。 内存分配虽然成功，但是尚未初始化就引用它 。 内存分配成功并且已经初始化，但操作越过了内存的边界。 忘记了释放内存，造成内存泄露。  2.智能指针(将普通的指针封装为一个栈对象)\n智能指针可以防止忘记调用delete释放内存，以及多次释放同一个指针所造成的程序崩溃。实现了资源自动释放。\n unique_ptr  生命周期：从指针创建开始到离开作用域。 如果没有多线程共享资源，则使用unique_ptr   shared_ptr  智能指针是模版类，使用make_shared函数来初始化 ，不能将指针直接复制给一个智能指针 get函数获取原始指针 使用引用计数实现多个智能指针同时指向一个对象 拷贝和赋值，拷贝使得对象的引用计数加一，赋值使得引用计数减一，指向后来的对象。 循环引用，会导致堆内存无法正确释放导致内存泄漏。   weak_ptr  不控制所指对象的生命周期，指向一个由shared_ptr管理的对象 使用shared_ptr来初始化它 auto p = make_shared42 ; weak_ptrwp(p)//wp弱共享p,p的引用计数不变。 expired()观测引用计数，若为true则引用计数为0；lock(),获取一个可用的shared_ptr对象，从而操作资源，若引用计数为0则返回一个存储空指针的shared_ptr    内部实现\nhttps://blog.csdn.net/gammag/article/details/88655744\n3. 虚函数\n虚函数的作用 C++中的虚函数的作用主要是实现了多态的机制。基类定义虚函数，子类可以重写该函数；在派生类中对基类定义的虚函数进行重写时，需要在派生类中声明该方法为虚方法。\n当子类重新定义了父类的虚函数后，当父类的指针指向子类对象的地址时，[即B b; A a = \u0026amp;b;] 父类指针根据赋给它的不同子类指针，动态的调用子类的该函数，而不是父类的函数（如果不使用virtual方法，请看后面★*），且这样的函数调用发生在运行阶段，而不是发生在编译阶段，称为动态联编。而函数的重载可以认为是多态，只不过是静态的。注意，非虚函数静态联编，效率要比虚函数高，但是不具备动态联编能力。\n虚函数的实现机制\n虚函数表\n1、当类中存在虚函数里.则编译器会在编译期自动的给该类生成一个函数表，并在所有该类的对像中放入一个隐式变量vptr,该变量是一个指针变量，它的值指向那个类中的由编译器生成的虚函数表.\n2、每个类自己的虚函数入口都在这张表中维护，调用方法的时候会隐式的传入一个this指针，然后系统会根据this指针找到对应的vptr,进而找到对应的虚函数表，找到真正方法的地址，然后才去调用这个方法，这可以叫动态绑定。\n3、虚函数表存放重写的虚函数，当基类的指针指向派生类的对象时，调用虚函数时都会根据vptr来选择虚函数，而基类的虚函数在派生类里已经被改写或者说已经不存在了，所以也就只能调用派生类的虚函数版本了.\n实现机制\nhttps://www.cnblogs.com/malecrab/p/5572730.html\nhttps://www.cnblogs.com/yinbiao/p/11603618.html\nvptr问题\nhttps://www.cnblogs.com/yangguang-it/p/6547314.html\n析构函数可以是虚函数吗\n如果基类会被继承，则需要将析构函数设置为虚函数。\n基类指针可以指向派生类的对象（多态性），如果删除该指针delete[] p;就会调用该指针指向的派生类析构函数，而派生类的析构函数又会自动调用基类的析构函数，这样整个派生类的对象完全被释放。如果析构函数不被声明为虚函数，则编译器实施静态绑定，在删除基类指针时，只会调用基类的析构函数而不调用派生类的析构函数，这样就会造成派生类对象析构不完全。所以，将析构函数声明为虚函数是十分必要的。\n构造函数可以调用虚函数\n构造函数是可以调用虚函数的，例子 https://paste.ubuntu.com/p/qwGZRNjj2m/\n总结：是进行静态绑定，首先构造父类构造函数，虚函数也调用父类的，然后调用子类构造函数，虚函数也调用子类的。\n纯虚函数和虚函数\n有纯虚函数的类为抽象类。 纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。\n在基类中实现纯虚函数的方法是在函数原型后加“=0” virtual void function()=0\n详情见：https://www.cnblogs.com/steven66/p/5013695.html。\n4.面向对象理解\n详情见：https://www.cnblogs.com/ycg0808/p/5479213.html。\n四大特征：继承、多态、封装、抽象。\n继承：子类继承父类的特征和行为。子类可以有父类的方法，属性（非private）。子类也可以对父类进行扩展，也可以重写父类的方法。缺点就是提高了代码之间的耦合。final可以修饰类，方法，属性。修饰的类不能继承，修饰的方法不能重写，修饰的属性不能修改。\n多态：多态就是不同类的对象，对同一消息做出不同响应就叫多态。\n封装：封装就是把过程和数据包围起来，对数据的访问只能通过特定的界面。能降低耦合性。\n抽象：分为过程抽象和数据抽象。\n详情见：https://www.cnblogs.com/msn-z/p/7802576.html。\n5.内存模型\n栈（局部变量，编译时分配） 堆（动态存储区）（new程序时分配） 静态存储区（所有的静态/全局变量） 数据区 代码区\nC分为4个区：堆，栈，静态全局变量区，常量区。 C++内存分为5个区：\n1：栈区（stack）-由编译器自动分配释放，存放函数参数值，局部变量等。其操作类似于数据机构中栈。\n2：堆区（heap）-一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中堆是两回事，分配方式类似于链表。\n3：全局区（静态区static）-全局变量和静态变量存取释放在一快，初始化全局变量和静态变量在一块区域。未初始化全局变量和未初始化静态变量在相邻另一块区域，程序结束后由系统释放。\n4：文字常量区（coment）-常量字符串就是放在这里。程序结束后由系统释放。\n5： 程序代码区（code）- 存放函数二进制代码 详情见：https://www.cnblogs.com/Stultz-Lee/p/6751522.html。\n5.常见设计模式\n详细链接\nhttps://blog.csdn.net/u010993820/article/details/80968933\n单例模式详解\nhttps://blog.csdn.net/zhanghuaichao/article/details/79459130\n6.inline\nC++ 用 inline 关键字较好地解决了函数调用开销的问题。\n增加了 inline 关键字的函数称为“内联函数”。内联函数和普通函数的区别在于：当编译器处理调用内联函数的语句时，不会将该语句编译成函数调用的指令，而是直接将整个函数体的代码插人调用语句处，就像整个函数体在调用处被重写了一遍一样。\n有了内联函数，就能像调用一个函数那样方便地重复使用一段代码，而不需要付出执行函数调用的额外开销。很显然，使用内联函数会使最终可执行程序的体积增加。以时间换取空间，或增加空间消耗来节省时间，这是计算机学科中常用的方法。\n内联函数中的代码应该只是很简单、执行很快的几条语句。若比较复杂则不会判为内联函数。\nhttp://c.biancheng.net/view/199.html\nSTL 源码内容 1.STL的vector底层扩容\nvector实际上就是一个动态数组，底层是一段连续的线性内存空间。使用三个迭代器表示（指针）\n当大小和容量相等时，vector就需要扩容，此时需要三个步骤：\n 弃用现在的内存空间，申请一个两倍（1.5倍）大小的新的内存空间。 将旧的内存空间中的数据写入 将旧内存空间释放  2.STL的map、set底层数据结构\n查询的时间复杂度为O(lgn);空间复杂度为O(n); 底层数据结构都为红黑树\n红黑树底层提供两种insert操作：insert_unique() /insert_equal()\n红黑树的实现：五个模版（key value keyofvalue compare alloc）\nset\n set/multiset元素的value和key合一：value就是key 不可以通过迭代器修改元素（set的iterator为红黑树的const 迭代器，从而避免通过迭代器改变元素） set的操作都转给底层的模版进行操作，从技术的角度来说，set是一种container adapter（容器适配器，类似queue）  map\n map中key不可以修改，value可以。value和key组成value 红黑树的selectlst（select first）获取key （gcc） 实现第一条：把value包装成pair，其中key设置为const 独特的operator[],如果key不存在，lower_bound()找到合适的位置，并创建一个key插入红黑树  3.容器hashtable\n  空间足够时，直接按照编号插入\n  空间不足时，编号取余（空间大小）\n  如果发生冲突则通过链表串起来，但是如果串联的个数大于buckets vector（篮子的数量）则进行散列（篮子变为两倍附近的素数，53-\u0026gt;97）\n  hashtable的实现：value、key、HashFcn（将放入的东西映射为编号）、ExtractKey（如何提取key）、EqualKey（定义key相等）\n  ","id":1,"section":"posts","summary":"1.new 与 malloc new 是C++的操作符，malloc是C的标准库函数 new会调用构造函数，而malloc()不会 new返回指定类型的指针，而malloc(","tags":["C++"],"title":"C++基础问题总结","uri":"https://AIMHEctor.github.io/2020/04/c-/","year":"2020"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","id":2,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://AIMHEctor.github.io/2019/03/markdown-syntax/","year":"2019"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n Instagram Simple Shortcode","id":3,"section":"posts","summary":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://AIMHEctor.github.io/2019/03/rich-content/","year":"2019"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","id":4,"section":"posts","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de\npectora summo.\u003c/p\u003e","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://AIMHEctor.github.io/2019/03/placeholder-text/","year":"2019"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","id":5,"section":"posts","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":["emoji"],"title":"Emoji Support","uri":"https://AIMHEctor.github.io/2019/03/emoji-support/","year":"2019"}],"tags":[{"title":"C++","uri":"https://AIMHEctor.github.io/tags/c++/"},{"title":"css","uri":"https://AIMHEctor.github.io/tags/css/"},{"title":"emoji","uri":"https://AIMHEctor.github.io/tags/emoji/"},{"title":"html","uri":"https://AIMHEctor.github.io/tags/html/"},{"title":"markdown","uri":"https://AIMHEctor.github.io/tags/markdown/"},{"title":"privacy","uri":"https://AIMHEctor.github.io/tags/privacy/"},{"title":"shortcodes","uri":"https://AIMHEctor.github.io/tags/shortcodes/"},{"title":"text","uri":"https://AIMHEctor.github.io/tags/text/"},{"title":"themes","uri":"https://AIMHEctor.github.io/tags/themes/"},{"title":"网络编程","uri":"https://AIMHEctor.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]}